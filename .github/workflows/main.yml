# v1.4.3.vc-demo-storefront
name: Storefront CI
on:
  workflow_dispatch:
  push:
    branches: [ master, dev ]
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - 'build/**'
      - 'README.md'
      - 'LICENSE'
      - '**/argoDeploy.json'
  pull_request:
    branches: [ master, dev ]
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - 'build/**'
      - 'README.md'
      - 'LICENSE'
      - '**/argoDeploy.json'


jobs:
  ci:
    if: ${{ github.actor != 'dependabot[bot]' && (github.event.pull_request.head.repo.full_name == github.repository || github.event.pull_request.head.repo.full_name == '') }}  # Check that PR not from forked repo and not from Dependabot
    runs-on: ubuntu-latest
    env:
      CLOUD_INSTANCE_BASE_URL: ${{secrets.CLOUD_INSTANCE_BASE_URL}}
      CLIENT_ID: ${{secrets.CLIENT_ID}}
      CLIENT_SECRET: ${{secrets.CLIENT_SECRET}}
      SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
      GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      NUGET_KEY: ${{ secrets.NUGET_KEY }}
      BLOB_SAS: ${{ secrets.BLOB_TOKEN }}
      IMAGE_NAME: 'demo-storefront'
      PUBLISH_TO_DOCKER: 'false'
      UPDATE_LATEST_TAG: 'true'
      VERSION_SUFFIX: ''
      BUILD_STATE: 'failed'
      RELEASE_STATUS: 'false'
    outputs:
      artifactUrl: '${{ steps.artifactUrl.outputs.VALUE }}'
      jira-keys: ${{ steps.jira_keys.outputs.jira-keys }}
      deployConfigPath: '.deployment/demo-storefront/argoDeploy.json'

    steps:

      - name: Set variables
        if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'pull_request' }}
        run: |
          echo "UPDATE_LATEST_TAG=false" >> $GITHUB_ENV 
        #  echo "PUBLISH_TO_DOCKER=false" >> $GITHUB_ENV

      - name: Set up JDK 11 for dotnet-sonarscanner #Sonar stop accepting Java versions less than 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install VirtoCommerce.GlobalTool
        uses: VirtoCommerce/vc-github-actions/setup-vcbuild@master

      - name: Install dotnet-sonarscanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Get Image Version
        uses: VirtoCommerce/vc-github-actions/get-image-version@master
        id: image

      - name: Get changelog
        id: changelog
        uses: VirtoCommerce/vc-github-actions/changelog-generator@master

      - name: Set release variables
        run: |
          echo "VERSION_SUFFIX=${{ steps.image.outputs.suffix }}" >> $GITHUB_ENV

      - name: Set release-alpha variables
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "VERSION_SUFFIX=${{ steps.image.outputs.fullSuffix }}" >> $GITHUB_ENV

      - name: Add version suffix
        if: ${{ github.ref != 'refs/heads/master' }}
        uses: VirtoCommerce/vc-github-actions/add-version-suffix@master
        with:
          versionSuffix: ${{ env.VERSION_SUFFIX }}

      - name: SonarCloud Begin
        uses: VirtoCommerce/vc-github-actions/sonar-scanner-begin@master

      - name: Build
        run: vc-build Compile

      - name: Unit Tests
        run: vc-build Test -TestsFilter "Category=Unit|Category=CI" -skip

      - name: SonarCloud End
        uses: VirtoCommerce/vc-github-actions/sonar-scanner-end@master

      - name: Quality Gate
        uses: VirtoCommerce/vc-github-actions/sonar-quality-gate@master
        with:
          login: ${{secrets.SONAR_TOKEN}}

      - name: Packaging
        run: vc-build Compress -skip Clean+Restore+Compile+Test

      - name: Build Docker Image
        if: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev' || github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.ref != 'refs/heads/master') }}
        id: dockerBuild
        uses: VirtoCommerce/vc-github-actions/build-docker-image@master
        with:
          tag: ${{ steps.image.outputs.taggedVersion }}
          imageName: ${{ env.IMAGE_NAME }}
          dockerFiles: "https://raw.githubusercontent.com/VirtoCommerce/vc-docker/master/linux/storefront/Dockerfile"

      # - name: Publish to Blob
      #   if: ${{ github.ref == 'refs/heads/dev' || (github.event_name == 'workflow_dispatch' && github.ref != 'refs/heads/master') }}
      #   id: blobRelease
      #   uses: VirtoCommerce/vc-github-actions/publish-blob-release@master
      #   with:
      #     blobSAS: ${{ secrets.BLOB_TOKEN }}

      - name: Publish Github Release
        if: ${{ github.ref == 'refs/heads/master' }}
        with:
          changelog: ${{ steps.changelog.outputs.changelog }}
        uses: VirtoCommerce/vc-github-actions/publish-github-release@master

      - name: Docker Login
        if: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev' || github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.ref != 'refs/heads/master') }}
        uses: azure/docker-login@v1
        with:
          login-server: ghcr.io
          username: $GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Docker Image
        if: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev' || github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.ref != 'refs/heads/master') }}
        uses: VirtoCommerce/vc-github-actions/publish-docker-image@master
        with:
            image: ${{ steps.dockerBuild.outputs.imageName }}
            tag: ${{ steps.image.outputs.taggedVersion }}
            docker_user: ${{ secrets.DOCKER_USERNAME }}
            docker_token: ${{ secrets.DOCKER_TOKEN }}
            docker_hub: ${{ env.PUBLISH_TO_DOCKER }}
            update_latest: ${{ env.UPDATE_LATEST_TAG }}
      
      - name: Set artifactUrl value
        id: artifactUrl
        run: |
          echo ::set-output name=VALUE::ghcr.io/${{github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.image.outputs.taggedVersion }}

      - name: Add link to PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: VirtoCommerce/vc-github-actions/publish-artifact-link@master
        with:
          artifactUrl: '${{ steps.artifactUrl.outputs.VALUE }}'

      - name: Parse Jira Keys from All Commits
        uses: VirtoCommerce/vc-github-actions/get-jira-keys@master
        if: always()
        id: jira_keys
        with:
          release: ${{ env.RELEASE_STATUS }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: BUILD_STATE::successful
        if: success()
        run: echo "BUILD_STATE=successful" >> $GITHUB_ENV

      - name: Push Build Info to Jira
        if: ${{ env.CLOUD_INSTANCE_BASE_URL != 0 && env.CLIENT_ID != 0 && env.CLIENT_SECRET != 0 && steps.jira_keys.outputs.jira-keys != '' && always() }}
        id: push_build_info_to_jira
        uses: HighwayThree/jira-upload-build-info@master
        with:
          cloud-instance-base-url: '${{ secrets.CLOUD_INSTANCE_BASE_URL }}'
          client-id: '${{ secrets.CLIENT_ID }}'
          client-secret: '${{ secrets.CLIENT_SECRET }}'
          pipeline-id: '${{ github.repository }} ${{ github.workflow }}'
          build-number: ${{ github.run_number }}
          build-display-name: 'Workflow: ${{ github.workflow }} (#${{ github.run_number }})'
          build-state: '${{ env.BUILD_STATE }}'
          build-url: '${{github.event.repository.url}}/actions/runs/${{github.run_id}}'
          update-sequence-number: '${{ github.run_id }}'
          last-updated: '${{github.event.head_commit.timestamp}}'
          issue-keys: '${{ steps.jira_keys.outputs.jira-keys }}'
          commit-id: '${{ github.sha }}'
          repo-url: '${{ github.event.repository.url }}'
          build-ref-url: '${{ github.event.repository.url }}/actions/runs/${{ github.run_id }}'

      - name: Confirm Jira Build Output
        if: success()
        run: |
          echo "Jira Upload Build Info response: ${{ steps.push_build_info_to_jira.outputs.response }}"

  dev_cd:
    if: github.ref == 'refs/heads/dev' || (github.event_name == 'workflow_dispatch' && github.ref != 'refs/heads/master')
    needs: ci
    runs-on: ubuntu-latest
    env:
      DEPLOYMENT_ENV: 'dev'
    steps:
      - name: Invoke Module deployment workflow
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: VC deployment
          token: ${{ secrets.REPO_TOKEN }}
          inputs: '{ "artifactUrl": "${{ needs.ci.outputs.artifactUrl }}", "deployEnvironment": "${{ env.DEPLOYMENT_ENV }}", "deployConfigPath": "${{ needs.ci.outputs.deployConfigPath}}", "jiraKeys":"${{ needs.ci.outputs.jira-keys }}" }'

  demo_cd:
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    needs: ci
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      DEPLOYMENT_ENV: 'prod'
    steps: 
      - name: Read deployment config
        uses: VirtoCommerce/vc-github-actions/get-deploy-param@master
        id: deployConfig
        with:
          envName: ${{ env.DEPLOYMENT_ENV }}
          deployConfigPath: ${{ needs.ci.outputs.deployConfigPath}}

      - name: Get Demo-test Jira key from commit message
        id: demoKey
        run: |
          (ISSUE_ID=$(echo "${{ github.event.head_commit.message }}" | awk "/Demo-test:\s*.*/" | grep -o -P "((?!([A-Z0-9a-z]{1,10})-?$)[A-Z]{1}[A-Z0-9]+-\d+)")
          echo ::set-output name=VALUE::$ISSUE_ID
          echo "Deploy demo jira key is" $ISSUE_ID)||(true)

      - name: Create deploy PR in Demo
        if: steps.demoKey.outputs.VALUE != ''
        uses: VirtoCommerce/vc-github-actions/create-deploy-pr@master
        with:
          deployRepo: ${{ steps.deployConfig.outputs.deployRepo }}
          deployBranch: ${{ steps.deployConfig.outputs.deployBranch }}
          artifactKey: ${{ steps.deployConfig.outputs.artifactKey }}
          artifactUrl: ${{ needs.ci.outputs.artifactUrl }}
          taskNumber: ${{ steps.demoKey.outputs.VALUE }}
          cmPath: ${{ steps.deployConfig.outputs.cmPath }}